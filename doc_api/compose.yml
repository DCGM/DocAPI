services:
  doc-api:
    # see https://github.com/DCGM/DocAPI/pkgs/container/doc-api and choose your version
    image: ghcr.io/dcgm/doc-api:latest
    ports:
      - "9999:9999"
    volumes:
      - /mnt/zfs1/doc_api/doc_api_data:/app/doc_api_data
    env_file:
      - .env
    environment:
      # Job definition examples for documentation (validation is strictly for JobDefinition schema)
      JOB_DEFINITION_EXAMPLES: |
        {
          "IMAGE job": {
            "summary": "Default",
            "description": "Simple job with two images.",
            "value": {
              "images": [
                { "name": "image0.jpg", "order": 0 },
                { "name": "image1.jpg", "order": 1 }
              ],
              "meta_json_required": false,
              "alto_required": false,
              "page_required": false
            }
          }
        }
      # Meta JSON upload examples for documentation (validation is done only for valid JSON structure, not content)
      META_JSON_EXAMPLES: |
        {
          "object": {"summary": "JSON object", "value": {"engine": "ocr", "version": 2}},
          "array": {"summary": "JSON array", "value": ["step1", "step2", "step3"]},
          "primitive": {"summary": "Primitive value", "value": true}
        }
    restart: unless-stopped
    # if using traefik, comment out the ports section above and uncomment the labels section below (add traefik network)
    # labels:
    #   - traefik.enable=true
    #   - traefik.http.routers.doc-api.rule=Host(`doc-api.com`)
    #   - traefik.http.routers.doc-api.entrypoints=websecure
    #   - traefik.http.services.doc-api.loadbalancer.server.port=9999
    depends_on:
      db:
        condition: service_healthy
    networks: [ doc_api_network ]


  db:
    image: postgres:alpine
    volumes:
      # sudo chown -R 999:999 /mnt/ssd/doc_api/db before first use
      - /mnt/ssd/doc_api/db:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB:-postgres} -U ${POSTGRES_USER:-postgres}"]
      timeout: 45s
      interval: 5s
      retries: 20
    shm_size: 1g
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks: [ doc_api_network ]


  db-backup:
    image: prodrigestivill/postgres-backup-local
    volumes:
      - /mnt/zfs1/doc_api/db_backup:/backups
    expose:
      - 8001
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SCHEDULE: "0 0 * * *"   # daily 00:00
      BACKUP_KEEP_DAYS: "7"
      BACKUP_KEEP_WEEKS: "4"
      BACKUP_KEEP_MONTHS: "6"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks: [doc_api_network]


networks:
  doc_api_network: {}

